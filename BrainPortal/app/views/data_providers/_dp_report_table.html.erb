
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%=
  render(:partial => 'shared/active_filters', :locals  => {
    :scope => @scope,
    :model => nil
  })
%>

<%
  @view_scope.each do |issue|
    issue[:userfile]    = Userfile.find_by_id(issue[:userfile_id]) if issue[:userfile_id]
  end

  user_ids    = @issues.map { |i| i[:user_id] }.uniq
  logins      = User.where(:id => user_ids).pluck(:id,:login).to_h
  logins[nil] = "(None)"
  user_counts = @issues.each_with_object( Hash.new(0) ) { |issue, counts| counts[issue[:user_id]] += 1 }
%>

<%=
  dynamic_scoped_table(@view_scope,
    :id    => 'data_provider_issues',
    :scope => @scope
  ) do |t|
%>
  <%
    t.paginate
    t.selectable('issue_ids[]')

    t.row { |issue| { :class => "severity-#{issue[:severity]}" } }

    t.column('Type', :type,
      :sortable => true,
      :filters  => default_filters_for(@issues, :type)
    ) { |issue| issue[:type].to_s.titleize }

    t.column('Issue', :message,
      :sortable => true
    )

    t.column('Severity', :severity,
      :sortable => true,
      :filters  => default_filters_for(@issues, :severity)
    ) { |issue| issue[:severity].to_s.titleize }

    t.column('Action', :action,
      :sortable => true,
      :filters  => default_filters_for(@issues, :action)
    ) { |issue| issue[:action] ? issue[:action].to_s.titleize : '(None)' }

    t.column('File', :userfile) do |issue|
      next '(None)' unless issue[:userfile]
      link_to_userfile_if_accessible(issue[:userfile], current_user)
    end

    t.column('User', :user_id,
      :filters  => filter_values_for(@issues, :user_id,
        format: lambda do |format_info|
          value, label, count = *format_info
          {
           :value     => value,
           :label     => "#{logins[value]} (of #{user_counts[label]})" ,
           :indicator => count,
          }
        end
        )
      ) do |issue|
      link_to_user_if_accessible(issue[:user_id])
    end
  %>
<% end %>
